* Utilities
** Helm
Helm is a autocompletion framework for various commands and actions.
#+begin_src elisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (add-to-list 'helm-completing-read-handlers-alist
               '(verilog-goto-defun . nil))
  )
#+end_src
Extra helm plugins
#+begin_src elisp
(use-package helm-swoop)
(use-package helm-ag)
#+end_src

* Themes
** Nyan
Use Nyan cat to indicate position in buffer.
#+begin_src elisp
(use-package nyan-mode)
(nyan-mode t)
#+end_src
* Python
** Elpy
Basic Elpy setup, provides code navigation, formatting, completion, ...
#+begin_src elisp
(use-package elpy)
(elpy-enable)
(eval-after-load "elpy"
  (setq elpy-formatter "black")
  )
#+end_src
Add quick shortkey for formatting file with black
#+begin_example elisp
(add-hook 'elpy-mode-hook
  (lambda ()
    (local-set-key [f9] 'elpy-format-code))
  (poetry-tracking-mode))
#+end_example
Do not echo shell output, usefull when an interactive evaluation prints a lot of text.
#+begin_src elisp
(setq elpy-shell-echo-output nil)
#+end_src

** Interactive Shell
Use IPython for interactive python scripting
#+begin_src elisp
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+end_src

Additional packages for interactive python sessions
#+begin_src elisp
(use-package python-x)
(python-x-setup)
(define-key python-mode-map (kbd "M-<return>") nil)
(use-package python-cell)
(add-hook 'inferior-python-mode-hook
  (lambda () (setq python-cell-mode nil)))
#+end_src

** Notebooks
Emacs Ipython Notebooks to access jupyter notebooks inside emacs.
#+begin_src elisp
(use-package ein)
(setq ein:output-area-inlined-images t)
#+end_src

** Poetry
Poetry wrapper for executing poetry commands from within emacs.
#+begin_src elisp
(use-package poetry)
#+end_src
Automatically track a project's python environment if it uses poetry
#+begin_src elisp
(add-hook 'elpy-mode-hook
  (poetry-tracking-mode))
#+end_src

* Project Management
** Projectile
Use projectile for project management and navigation.
#+begin_src elisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-switch-project-action #'magit-status))
#+end_src
Use helm for projectile autocompletion
#+begin_src elisp
(use-package helm-projectile)
(helm-projectile-on)
#+end_src

** Magit
#+begin_src elisp
(use-package magit)
(use-package forge)
(with-eval-after-load 'magit
  (require 'forge))
#+end_src

* Unorganized
#+begin_src elisp
;; Quickhelp mode
(use-package company-quickhelp)
;; muliple-cursors
(use-package multiple-cursors)
;; When you have an active region that spans multiple lines,
;; the following will add a cursor to each line:
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; When you want to add multiple cursors not based on continuous
;; lines, but based on keywords in the buffer, use:
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; RealGUD debugger
(use-package realgud)
(use-package realgud-ipdb)
;; Verilog mode
(use-package verilog-mode)
(setq verilog-indent-level             2
      verilog-indent-level-module      2
      verilog-indent-level-declaration 2
      verilog-indent-level-behavioral  2
      verilog-indent-level-directive   1
      verilog-case-indent              2
      verilog-auto-newline             nil
      verilog-auto-indent-on-newline   t
      verilog-tab-always-indent        t
      verilog-auto-endcomments         t
      verilog-minimum-comment-distance 1
      verilog-indent-begin-after-if    t
      verilog-auto-lineup              'declarations
      verilog-linter                   "my_lint_shell_command"
      )

;; VHDL mode
(use-package vhdl-mode)
;; Golden ratio mode
(use-package golden-ratio)
;; Additional Configuration
;;===========================
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Put custom variables in separate file
(setq custom-file "~/.emacs_custom")
(load custom-file 'noerror)

;; Disable double buffering as it gives issues on some X11 versions, remote connections
;; (setq default-frame-alist
;;          (append default-frame-alist '((inhibit-double-buffering . t))))
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
;; Extra modes
(add-to-list 'auto-mode-alist '("\\.sdc\\'" . tcl-mode))
(add-to-list 'auto-mode-alist '("\\.cpf\\'" . tcl-mode))
(add-to-list 'auto-mode-alist '("\\.upf\\'" . tcl-mode))
; Instant auto-complete in all buffers with company mode
(setq company-idle-delay 0)
(add-hook 'after-init-hook 'global-company-mode)
;; Default theme settings
(load-theme 'leuven t)
;; C++
(use-package irony)
(use-package company-irony)
(use-package flycheck)
(use-package flycheck-irony)
(use-package clang-format)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(require 'company-irony)
(eval-after-load 'company
 '(add-to-list 'company-backends 'company-irony))
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
(require 'clang-format)
(global-set-key (kbd "C-c i") 'clang-format-region)
(global-set-key (kbd "C-c u") 'clang-format-buffer)

(setq clang-format-style-option "llvm")
(setq-default clang-format-fallback-style "llvm")
;; Disable bell sound
(setq ring-bell-function 'ignore)
;; (server-start)
;; Dashboard
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-items '((projects . 10)
                        (recents  . 10)
                        ))
(setq dashboard-startup-banner 'logo)
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
;; which-keys
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
;; yaml
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
;; Use plain text mode for file list (.f) files
(add-to-list 'auto-mode-alist '("\\.f\\'" . text-mode))
(use-package company-box
  :hook (company-mode . company-box-mode))
;; Language sever mode
(setenv "LSP_USE_PLISTS" "true")
(use-package lsp-mode)
(use-package lsp-ui)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq gc-cons-threshold 100000000)
;; Add verilog mode to lsp
(require 'lsp-verilog)
(add-to-list 'lsp-language-id-configuration '(verilog-mode . "verilog"))
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("verible-verilog-ls" "--ruleset" "all" "--wrap_spaces" "2" "--column_limit" "100" "--port_declarations_alignment" "align" "--named_parameter_alignment" "align" "--named_port_alignment" "align"))
                  :major-modes '(verilog-mode)
                  :server-id 'verible-ls
                  :add-on? t))
(custom-set-variables
  '(lsp-clients-svlangserver-launchConfiguration "verilator -sv --lint-only -Wall")
  '(lsp-clients-svlangserver-formatCommand "verible-verilog-format --inplace "))
;; (add-hook 'verilog-mode-hook 'lsp)

(add-hook 'verilog-mode-hook
  (lambda ()
    (local-set-key [f9] 'lsp-format-buffer)))
;; Add regex for verilator
(add-to-list 'compilation-error-regexp-alist 'verilator-message)
(add-to-list 'compilation-error-regexp-alist-alist '(verilator-message "%\\(Error\\|Warning\\)-\\([A-Z0-9_]+\\): \\([^:]*\\):\\([0-9]*\\):\\([0-9]*\\):" 3 4 5 1 3))
(delete 'verilog-verilator compilation-error-regexp-alist)
;; Disable killing text if region is not active
(setq mark-even-if-inactive nil)
;; Source Code Navigation
(use-package ggtags)
(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")                 ;; personal snippets
(yas-reload-all)
(add-hook 'verilog-mode-hook 'yas-minor-mode)
(put 'dired-find-alternate-file 'disabled nil)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
;; Perspective el
(global-set-key (kbd "C-x C-b") 'persp-ibuffer)
(use-package perspective
  :bind
  ("C-x b" . 'helm-buffers-list)         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
  :init
  (persp-mode))
#+end_src
